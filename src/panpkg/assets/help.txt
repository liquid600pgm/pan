#pan - puny animator
copyright (C) lqdev, 2020-2021
version __version, compiled on __compileDate

pan is a tool for creating motion graphics using Lua.

#USAGE:
  pan <luafile> [action] [options]
  pan reference|r [options] [query]

#ACTIONS:
| preview     display an interactive preview of the animation.
              in this case, the framerate you set in the luafile does not
              matter! it will always be your monitor's refresh rate, for a
              pleasant playback experience. please note that with large
              animations with lots of code running slowdowns may occur.
              this is the default action.
| render      render animation to PNGs to a folder with the same name as the
              luafile. eg. for `anim.lua`, will render to `anim/{frame}.png`
| reference   browse documentation for the Lua API

#PREVIEW KEYBOARD SHORTCUTS:
| Q        close the preview
| R        reload animation
| Space    play/pause
| ←        previous frame
| →        next frame
| Shift ←  0.25s back
| Shift →  0.25s forward
| Ctrl ←   jump to start of animation
| Ctrl →   jump to end of animation

#RENDER OPTIONS:
| -c --clean          clean output directory. this option is not enabled by
                      default; instead, a warning that the output directory
                      already exists is emitted and rendering is aborted.
| -f --framerate:0    override the framerate set by the animation. a value of 0
                      means no override
| -x --export:format  export animation using FFmpeg, which must be installed
                      and in your $PATH for this to work.
                      available formats: gif, webmVP9, webp
| --ffmpeg            pass all following parameters to ffmpeg.
                      the parameters `-r <framerate> -i <dir>/%d.png` are added
                      to the beginning of the command, and literal `@@` in any
                      of the provided parameters is replaced with the output
                      filename *without* the extension.

#REFERENCE OPTIONS:
| -p --pager:bin      use the provided pager binary. the pager is chosen from
                      the following sources, with top-to-bottom priority:
                        1. the --pager CLI parameter
                        2. the $PAN_PAGER environment variable
                        3. the $PAGER environment variable
                        4. the $MAN_PAGER environment variable
                        5. less
                        6. no pager (direct output to stdout)
                      if a pager program is used, the -fR parameters are passed
                      to it to retain colored output. use -P to override this.
                      the pager can be disabled simply by passing an empty
                      string: `-p:`.
                      pagination is currently unavailable on non-POSIX OSes.
| -P --passPager:-fR  pass the given parameters to the pager program. this can
                      be overriden using the $PAN_PAGER_PARAMS environment var

#REFERENCE QUERY:
  if provided, the reference will be searched for the given phrase.
  for example, `pan r width` will bring up the documentation for pan.width.
  the pan namespace is added automatically to all queries without it.
  type queries are also supported, so `pan r Color.r` will display documentation
  for Color's .r field, and `Paint:lineWidth` will display docs for Paint's
  :lineWidth method. it is also possible to omit the field or method name, and
  simply do eg. `Color.` or `Color:` - this will list all fields or methods for
  a given type.
  note that queries never use pagination.

#LUAFILE:
  the luafile is the main file for the animation. it must contain a function
  called `render` with no parameters.
  at the beginning of your luafile, there must also be a call to pan.animation.
  see `pan reference` for more details on available functions.

*****

#GLOBALS

  all functions from the pan namespace are available as global variables by
  default. using the pan namespace should be preferred in library code, as the
  namespace is immutable, so the user can't possibly override pan methods. you
  can expect that they will always work.

#PROJECT

> pan.animation { width=, height=, length=, framerate = 60 }
    sets the animation up for rendering.
> pan.width  pan.height
    the width and height provided in animation(). these are overriden by
    pan.switch() if it's used.

#COLOR

> pan.gray(value, [alpha = 255])
    creates a grayscale color with the RGB components set to the given `value`.
    if `alpha` is provided, the alpha channel of the color will be the specified
    value, otherwise it is 255
> pan.rgb(red, green, blue)  pan.rgba(red, green, blue, alpha)
    creates a color with the given RGB[A] components
> pan.hex(hexcode)
    parses a hex color value and creates a color with the given RGB[A]
    components. supported syntax:
;     #RGB
;     #RGBA
;     #RRGGBB
;     #RRGGBBAA

> Color  ::type
| .r   the color's red component
| .g   the color's green component
| .b   the color's blue component
| .a   the color's alpha component
> :withRed(r)  :withGreen(g)  :withBlue(b)  :withAlpha(a)
    utility functions that return a new color with a channel altered.
    r, g, b, a must be values between 0..255
> :mulAlpha(coeff)
    utility function that returns a new color with the source color's alpha
    channel multiplied by coeff. coeff must be a value between 0..1

#IMAGES

> pan.image.empty(width, height)
> pan.image.load(path)
    creates or loads a new image. the image can then be used as a paint or
    drawing destination (see pan.switch)
> pan.image.result
    the render result image. this is the default output image.

> Image  ::type
| .width   the image's width
| .height  the image's height
> :size()
    returns both the image's width and height in one go

#PAINTS

> pan.solid(color)
    creates a solid paint with the given color
> pan.pattern(image)
    creates a pattern paint with the given image

> Paint  ::type
> :lineWidth(x)
    sets a paint's line width
> :lineCap(cap)
    sets a paint's line cap (lcButt|lcSquare|lcRound)
> :lineJoin(join)
    sets a paint's line join (ljBevel|ljMiter|ljRound)
> :antialiasing(mode)
    sets a paint's antialiasing mode.
|     aaDefault   backend-specific antialiasing (default)
|     aaNone      no antialiasing
|     aaGray      grayscale antialiasing
> :blendMode(mode)
    sets a paint's blend mode. available modes:
;     bmClear  bmSource  bmOver  bmIn  bmOut  bmAtop
;     bmDest  bmDestOver  bmDestIn  bmDestOut  bmDestAtop
;     bmXor  bmAdd  bmSaturate  bmMultiply  bmScreen  bmOverlay
;     bmDarken  bmLighten  bmColorDodge  bmColorBurn
;     bmHardLight  bmSoftLight
;     bmDifference  bmExclusion
;     bmHslHue  bmHslSaturation  bmHslColor  bmHslLuminosity
    refer to https://cairographics.org/operators/ for details on what these do

  the following methods only apply to image pattern paints, and don't affect
  any other kind of paint.

> :extend(mode)
    sets the extension mode for pattern paints.
|     NoExtend   pixels outside of the pattern's bounds are fully transparent
|     Repeat     the pattern is tiled by repeating
|     Reflect    the pattern is tiles by reflecting at edges
|     Pad        pixels outside of the pattern copy the closest pixel from
                 the image
> :filter(mode)
    sets the filtering mode for pattern paints.
|     Nearest   nearest neighbor filtering
|     Linear    bilinear filtering
> :cutout(x, y, w, h)
    sets the cutout rectangle for pattern paints.

#DRAWING

> pan.clear(paint)
    clears the canvas with a paint.
> pan.push()
    saves the current drawing parameters (transform, clip) onto a stack.
    this does not affect the current path. if you want to save/restore the path,
    use pushPath() and popPath().
> pan.pop()
    restores the parameters off of the stack.
> pan.pushPath()
    pushes the current path onto the path stack.
> pan.popPath()
    pops the last path saved onto the path stack off of it and restores it.

> pan.begin()
    begins drawing a path. call this before any path drawing operation,
    otherwise remnants of old paths may still remain.
> pan.moveTo(x, y)
    moves to the given position for line placement.
> pan.lineTo(x, y)
    adds a line from the current position to the given position to the given
    path. moves the current position to (x, y)
> pan.moveBy(dx, dy)
    similar to moveTo(), but moves the cursor relative to its current position.
> pan.relLineTo(dx, dy)
    similar to lineTo(), but moves the cursor relative to its current position.
> pan.rect(x, y, w, h)
    adds a rectangle to the current path.
> pan.arc(x, y, r, astart, aend)
    adds an arc to the current path.
> pan.close()
    closes the existing path by creating a line from the current point to the
    starting point
> pan.pathCursor()
    returns two values (x, y) containing the current path position (cursor).
> pan.fill(paint)
    fills the path with the given paint.
> pan.stroke(paint)
    strokes the path with the given paint.
> pan.clip()
    clips the drawing area to the current path. any further drawing operations
    will be only visible inside that area. the clip area may only get smaller;
    the only way to enlarge it is by using push() and pop().

> pan.line(x0, y0, x1, y1, paint)
    shortcut for drawing a line using begin(), moveTo(), lineTo() and stroke()
> pan.rects(x, y, w, h, paint)  pan.rectf(x, y, w, h, paint)
    draws a stroked or filled rectangle at the given coordinates (top left),
    with the given size and paint
> pan.circles(x, y, r, paint)  pan.circlef(x, y, r, paint)
    similar to (stroke|fill)Rect, but draws a circle with the given center point
    and radius
> pan.cliprect(x, y, w, h)
    shortcut around calling begin(), rect(), and clip().

> pan.blit(image, x, y, [w, h], [{ filter= }])
    shortcut for drawing a rectangle with an image paint.
    x, y, w, h specify the destination rectangle.
    if w, h are not provided, the image's size is used.
    if filter is provided, the given filtering mode is used when scaling the
    image. if no filtering mode is provided, Nearest is used as a default.
> pan.switch([image])
    if provided with an image, switches to the graphics context of the given
    image. returns the previous image.
    note that every image gets its own graphics context, which means that
    properties like the path and transform are not preserved between calls
    to this function.
    the render result image can be accessed via pan.image.result.

> pan.font(name, [weight = fwNormal], [slant = fsNormal])
    loads a font by the given name, font slant (fsNone|fsItalic|fsOblique), and
    weight (fwNormal|fwBold).
> pan.text(font, x, y, text, size,
>          [w = 0], [h = 0], [halign = taLeft], [valign = taTop])
    adds text to the path, using the given font, at the given coordinates,
    at the given font size. the [w, h, halign, valign] parameters
    are used for alignment: the text will be aligned inside of a rect with the
    given dimensions, and at the specified position.
    valid values for halign:  taLeft, taCenter, taRight
    for valign:               taTop, taMiddle, taBottom
    after the text is rendered, the path position is set to where the next
    character should be placed for rendering with
    w = 0, h = 0, halign = taLeft, valign = taBottom.
> pan.addText(font, text, size)
    adds text to the path, but does not reposition the cursor initially.
    instead, the cursor has to be positioned using moveTo() or another text()
    call.
> pan.textf(font, x, y, text, size, paint,
>          [w = 0], [h = 0], [halign = taLeft], [valign = taTop])
    draws filled text. see above
> pan.texts(font, x, y, text, size, paint,
>          [w = 0], [h = 0], [halign = taLeft], [valign = taTop])
    draws stroked text. see above
> pan.textSize(font, text, size)
    returns the width and height of the given text, at the given font size.

#TRANSFORMS

> pan.translate(x, y)
    translates the current view by (x, y) pixels.
> pan.scale(x, y)
    scales the current view by a factor of (x, y).
> pan.rotate(z)
    rotates the current view by z radians.

#MATH

> pan.clamp(x, a, b)
    clamps the given value x between a and b.
> pan.map(x, min0, max0, min1, max1)
    maps x from the range min0..max0 to min1..max1.

#ANIMATION

> pan.time
    stores the current frame's time, in seconds.
    only valid during render()
> pan.warpTime(amount, callback)
    subtracts the given amount from the time "perceived" in the given callback.
    this is the only way to change the value of pan.time without resorting to
    hacks. the purpose of this is to not make the user have to pass
    a time offset parameter around to functions.
> pan.length
    stores the animation's length in seconds
> pan.framerate
    stores the framerate
> pan.interp(a, b, t, [func = linear])
    interpolates between the two values a and b with the coefficient t (in the
    range 0..1) using the given easing function. if t is out of the given range,
    clamp() is used to limit it.
> pan.ease(a, b, starttime, endtime, [func = linear])
    eases a given value from a to b between starttime and endtime seconds in the
    animation using the given easing function (see below).
> pan.easel(a, b, starttime, length, [func = linear])
    similar to ease(), but uses a length instead of an ending time.
> pan.keyframes {
>   { time=, val=, [easing = linear] },
>   ...
> }
    animates a property using keyframes. this uses ease() internally, but allows
    for expressing sequential keyframe-based motion much more easily.

  easing functions
> pan.linear(x) pan.step(x)
> pan.
>   (sine|quad|cubic|quartic|quintic|expo|circ|back|elastic|bounce)
>   (In|Out|InOut)
    each easing function accepts a single parameter and outputs a value between
    0 and 1 for interpolating another value. see interp() and ease()
    linear() is a noop, all it does is it returns its input value
> pan.Easings.linear  pan.Easings.step
> pan.Easings.In  pan.Easings.Out  pan.Easings.InOut
    a global table that contains all the previously mentioned functions if you
    want to eg. iterate over them.

#EXTRA

> pan.len(x)
    returns the length of the given string or table. this is equivalent to #x
    for strings, but counts all the keys for tables. returns 0 for other types.
> pan.repr(x)
    returns the string representation of a value for debugging. This uses
    tostring for all types except tables, where it returns the keys and values
    of the table.
> pan.require(modname)
    similar to vanilla Lua's `require` but does not cache loaded modules.
    this is very useful if your animation is made out of a few smaller, reusable
    modules, as vanilla `require` will load a module *once* and then keep
    reusing it between hot reloads.
